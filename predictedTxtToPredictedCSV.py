import csv
import json

head = ['Q23793561', 'Q7600677', 'Q333464', 'Q1936256', 'Q193076', 'Q194152', 'Q1152135', 'Q378859', 'Q33742', 'Q23808', 'Q755662', 'Q216601', 'Q128570', 'Q173156', 'Q7397', 'Q1427251', 'Q189900', 'Q327069', 'Q13649246', 'Q9135', 'Q483130', 'Q11660', 'Q363874', 'Q11216', 'Q3435924', 'Q764810', 'Q1635410', 'Q839721', 'Q21198', 'Q44337', 'Q373045', 'Q9143', 'Q3240252', 'Q8078', 'Q132364', 'Q2393193', 'Q874709', 'Q211496', 'Q80006', 'Q818888', 'Q11205', 'Q1026367', 'Q319400', 'Q205084', 'Q729271', 'Q15777', 'Q117801', 'Q2539', 'Q188522', 'Q11538', 'Q190524', 'Q272683', 'Q179310', 'Q845566', 'Q796212', 'Q1474542', 'Q12479', 'Q232661', 'Q2878974', 'Q7673435', 
'Q1027879', 'Q5300', 'Q19399674', 'Q1363085', 'Q752718', 'Q827335', 'Q37437', 'Q28470421', 'Q3510521', 'Q179976', 'Q190087', 'Q877977', 'Q2374463', 'Q478798', 'Q85810444', 'Q730920', 'Q467731', 'Q79872', 'Q844718', 'Q9492', 'Q638608', 'Q723897', 'Q185612', 'Q192588', 'Q176645', 'Q1047554', 'Q8513', 'Q176452', 'Q835922', 'Q1301371', 'Q192776', 'Q388', 'Q208163', 'Q583461', 'Q223335', 'Q170978', 'Q76592', 'Q11368', 'Q80993', 'Q8366', 'Q251212', 'Q2493', 'Q1051282', 'Q178377', 'Q844240', 'Q165436', 'Q3050461', 'Q857102', 'Q175263', 'Q833585', 'Q200125', 'Q131476', 'Q208042', 'Q166142', 'Q275596', 'Q251', 'Q165194', 'Q178354', 'Q117879', 'Q486902', 'Q181156', 'Q173212', 'Q1141518', 'Q2267705', 'Q11012', 'Q264164', 'Q848010', 'Q186055', 'Q12483', 'Q47506', 'Q184754', 'Q840540', 'Q30642', 'Q101333', 'Q219320', 'Q11476', 'Q68', 'Q11862829', 'Q6504956', 'Q1034415', 'Q494756', 'Q21447895', 'Q184793', 'Q2321565', 'Q3968', 'Q176623', 'Q735441', 'Q224055', 'Q206904', 'Q16338', 'Q12525525', 'Q8087', 'Q82571', 'Q212108', 'Q1047113', 'Q27058', 'Q12503', 'Q1070689', 'Q172491', 'Q116777014', 'Q938438', 'Q50423863', 'Q121416', 'Q868299', 'Q4798119', 'Q180634', 'Q163310', 'Q28865', 'Q43260', 'Q334384', 'Q207434', 'Q141495', 'Q115564437', 'Q395', 'Q42848', 'Q4479242', 'Q149972', 'Q5862903', 'Q752532', 'Q831366', 'Q189436', 'Q8789', 'Q17146476', 'Q79798', 'Q214526']

# Q2267705
# Q11862829
# Q1047113
# Q50423863

predictedCSV = open("predictedTail.csv", 'w', newline='')
wr = csv.writer(predictedCSV)

tagMapping = open("tagMappingv2.json", 'r')
mappedTag = json.load(tagMapping)
mappedTag = dict(map(reversed, mappedTag.items()))

for h in head:
    filename = h+"_"+"is_preceded_by"+"_predictedTail_try" + str(100) + "_using_" + "TransE" + ".txt"

    try:
        predictedTxt = open("predictedTail/" + filename, 'r')
    except FileNotFoundError:
        continue

    for line in predictedTxt:
        # print(line)
        splittedLine = line.split('\t')
        if(h != splittedLine[0]):
            wr.writerow([mappedTag[h], "is_preceded_by", mappedTag[splittedLine[0]], splittedLine[1], splittedLine[2], h, splittedLine[0].replace('\t', '')])

    predictedTxt.close()

    print(h, str(head.index(h)) + " / " + str(len(head)))

predictedCSV.close()
